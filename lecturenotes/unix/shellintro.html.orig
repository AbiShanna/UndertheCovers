
<!DOCTYPE html>

<html>
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>The Shell - Part I: Having an ASCII conversation with the OS &#8212; UndertheCovers</title>
    
  <link href="../_static/css/theme.css" rel="stylesheet" />
  <link href="../_static/css/index.c5995385ac14fb8791e8eb36b4908be2.css" rel="stylesheet" />

    
  <link rel="stylesheet"
    href="../_static/vendor/fontawesome/5.13.0/css/all.min.css">
  <link rel="preload" as="font" type="font/woff2" crossorigin
    href="../_static/vendor/fontawesome/5.13.0/webfonts/fa-solid-900.woff2">
  <link rel="preload" as="font" type="font/woff2" crossorigin
    href="../_static/vendor/fontawesome/5.13.0/webfonts/fa-brands-400.woff2">

    
      

    
    <link rel="stylesheet" href="../_static/pygments.css" type="text/css" />
    <link rel="stylesheet" href="../_static/sphinx-book-theme.e8e5499552300ddf5d7adccae7cc3b70.css" type="text/css" />
    <link rel="stylesheet" type="text/css" href="../_static/togglebutton.css" />
    <link rel="stylesheet" type="text/css" href="../_static/copybutton.css" />
    <link rel="stylesheet" type="text/css" href="../_static/mystnb.css" />
    <link rel="stylesheet" type="text/css" href="../_static/sphinx-thebe.css" />
    <link rel="stylesheet" type="text/css" href="../_static/panels-main.c949a650a448cc0ae9fd3441c0e17fb0.css" />
    <link rel="stylesheet" type="text/css" href="../_static/panels-variables.06eb56fa6e07937060861dad626602ad.css" />
    
  <link rel="preload" as="script" href="../_static/js/index.1c5a1a01449ed65a7b51.js">

    <script id="documentation_options" data-url_root="../" src="../_static/documentation_options.js"></script>
    <script src="../_static/jquery.js"></script>
    <script src="../_static/underscore.js"></script>
    <script src="../_static/doctools.js"></script>
    <script src="../_static/togglebutton.js"></script>
    <script src="../_static/clipboard.min.js"></script>
    <script src="../_static/copybutton.js"></script>
    <script >var togglebuttonSelector = '.toggle, .admonition.dropdown, .tag_hide_input div.cell_input, .tag_hide-input div.cell_input, .tag_hide_output div.cell_output, .tag_hide-output div.cell_output, .tag_hide_cell.cell, .tag_hide-cell.cell';</script>
    <script src="../_static/sphinx-book-theme.12a9622fbb08dcb3a2a40b2c02b83a57.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.4/require.min.js"></script>
    <script src="https://unpkg.com/@jupyter-widgets/html-manager@^0.18.0/dist/embed-amd.js"></script>
    <script async="async" src="https://unpkg.com/thebelab@latest/lib/index.js"></script>
    <script >
        const thebe_selector = ".thebe"
        const thebe_selector_input = "pre"
        const thebe_selector_output = ".output"
    </script>
    <script async="async" src="../_static/sphinx-thebe.js"></script>
    <link rel="index" title="Index" href="../genindex.html" />
    <link rel="search" title="Search" href="../search.html" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="docsearch:language" content="en" />
    
  </head>
  <body data-spy="scroll" data-target="#bd-toc-nav" data-offset="80">
    
    <div class="container-fluid" id="banner"></div>

    

    <div class="container-xl">
      <div class="row">
          
<div class="col-12 col-md-3 bd-sidebar site-navigation show" id="site-navigation">
    
        <div class="navbar-brand-box">
    <a class="navbar-brand text-wrap" href="../index.html">
      
      <img src="../_static/logo.jpg" class="logo" alt="logo">
      
      
      <h1 class="site-logo" id="site-title">UndertheCovers</h1>
      
    </a>
</div><form class="bd-search d-flex align-items-center" action="../search.html" method="get">
  <i class="icon fas fa-search"></i>
  <input type="search" class="form-control" name="q" id="search-input" placeholder="Search this book..." aria-label="Search this book..." autocomplete="off" >
</form><nav class="bd-links" id="bd-docs-nav" aria-label="Main navigation">
    <div class="bd-toc-item active">
        <ul class="nav bd-sidenav">
 <li class="toctree-l1">
  <a class="reference internal" href="../intro_ln.html">
   Under the Covers : The Secret Life of Software
  </a>
 </li>
</ul>
<p class="caption">
 <span class="caption-text">
  Course Specfic Introductions
 </span>
</p>
<ul class="nav bd-sidenav">
 <li class="toctree-l1">
  <a class="reference internal" href="../L00_210_JA.html">
   CS210 Computer Systems
  </a>
 </li>
 <li class="toctree-l1">
  <a class="reference internal" href="../L00_400_F21_JA.html">
   CS400 Fall 2021 : Machine Level Programming
  </a>
 </li>
</ul>
<p class="caption">
 <span class="caption-text">
  The Unix Development Environment
 </span>
</p>
<ul class="nav bd-sidenav">
 <li class="toctree-l1">
  <a class="reference internal" href="L01.html">
   1. SLS: Part I - UNIX : Introduction &amp;  Preliminaries
  </a>
 </li>
 <li class="toctree-l1">
  <a class="reference internal" href="L02.html">
   9. SLS Lecture 2 : Core Utilities, Editors and Shell Scripting
  </a>
 </li>
 <li class="toctree-l1">
  <a class="reference internal" href="L03.html">
   10. SLS Lecture 3 : I/O, Process Control and Credentials
  </a>
 </li>
 <li class="toctree-l1">
  <a class="reference internal" href="L04.html">
   11. SLS Lecture 4 : Automation using Make
  </a>
 </li>
 <li class="toctree-l1">
  <a class="reference internal" href="L05.html">
   12. SLS Lecture 5 : Version Control and GIT: The Basics
  </a>
 </li>
 <li class="toctree-l1">
  <a class="reference internal" href="L06.html">
   13. SLS Lecture 6 : Versions Control and GIT :  Beyond the Basics
  </a>
 </li>
</ul>
<p class="caption">
 <span class="caption-text">
  The Belly of the Beast: The von Neumann Architecture and Assembly Programming
 </span>
</p>
<ul class="nav bd-sidenav">
 <li class="toctree-l1">
  <a class="reference internal" href="../assembly/L07.html">
   14. SLS Lecture 7 : Topics
  </a>
 </li>
 <li class="toctree-l1">
  <a class="reference internal" href="../assembly/L08.html">
   15. SLS Lecture 8 : Topics
  </a>
 </li>
 <li class="toctree-l1">
  <a class="reference internal" href="../assembly/L09.html">
   16. SLS Lecture 9 : Topics
  </a>
 </li>
 <li class="toctree-l1">
  <a class="reference internal" href="../assembly/L10.html">
   17. SLS Lecture 10 : Topics
  </a>
 </li>
 <li class="toctree-l1">
  <a class="reference internal" href="../assembly/L11.html">
   18. SLS Lecture 11 : Topics
  </a>
 </li>
 <li class="toctree-l1">
  <a class="reference internal" href="../assembly/L12.html">
   19. SLS Lecture 12 : Topics
  </a>
 </li>
 <li class="toctree-l1">
  <a class="reference internal" href="../assembly/L13.html">
   20. SLS Lecture 13 : Topics
  </a>
 </li>
 <li class="toctree-l1">
  <a class="reference internal" href="../assembly/L14.html">
   21. SLS Lecture 14 : Topics
  </a>
 </li>
 <li class="toctree-l1">
  <a class="reference internal" href="../assembly/L15.html">
   22. SLS Lecture 15 : Topics
  </a>
 </li>
 <li class="toctree-l1">
  <a class="reference internal" href="../assembly/L16.html">
   23. SLS Lecture 16 : Topics
  </a>
 </li>
</ul>
<p class="caption">
 <span class="caption-text">
  Into the Light : C Programming
 </span>
</p>
<ul class="nav bd-sidenav">
 <li class="toctree-l1">
  <a class="reference internal" href="../C/L17.html">
   24. SLS Lecuture 17 : Topics
  </a>
 </li>
 <li class="toctree-l1">
  <a class="reference internal" href="../C/L18.html">
   25. SLS Lecture 18 : Topics
  </a>
 </li>
 <li class="toctree-l1">
  <a class="reference internal" href="../C/L19.html">
   26. SLS Lecture 19 : Topics
  </a>
 </li>
 <li class="toctree-l1">
  <a class="reference internal" href="../C/L20.html">
   27. SLS Lecture 20 : Topics
  </a>
 </li>
 <li class="toctree-l1">
  <a class="reference internal" href="../C/L21.html">
   28. SLS Lecture 21 : Topics
  </a>
 </li>
 <li class="toctree-l1">
  <a class="reference internal" href="../C/L22.html">
   29. SLS Lecture 22 : Topics
  </a>
 </li>
 <li class="toctree-l1">
  <a class="reference internal" href="../C/L23.html">
   30. SLS Lecture 23 : Topics
  </a>
 </li>
 <li class="toctree-l1">
  <a class="reference internal" href="../C/L24.html">
   31. SLS Lecture 24 : Topics
  </a>
 </li>
 <li class="toctree-l1">
  <a class="reference internal" href="../C/L25.html">
   32. SLS Lecture 25 : Topics
  </a>
 </li>
</ul>

    </div>
</nav> <!-- To handle the deprecated key -->

<div class="navbar_extra_footer">
  Powered by <a href="https://jupyterbook.org">Jupyter Book</a>
</div>

</div>


          


          
<main class="col py-md-3 pl-md-4 bd-content overflow-auto" role="main">
    
    <div class="topbar container-xl fixed-top">
    <div class="topbar-contents row">
        <div class="col-12 col-md-3 bd-topbar-whitespace site-navigation show"></div>
        <div class="col pl-md-4 topbar-main">
            
            <button id="navbar-toggler" class="navbar-toggler ml-0" type="button" data-toggle="collapse"
                data-toggle="tooltip" data-placement="bottom" data-target=".site-navigation" aria-controls="navbar-menu"
                aria-expanded="true" aria-label="Toggle navigation" aria-controls="site-navigation"
                title="Toggle navigation" data-toggle="tooltip" data-placement="left">
                <i class="fas fa-bars"></i>
                <i class="fas fa-arrow-left"></i>
                <i class="fas fa-arrow-up"></i>
            </button>
            
            
<div class="dropdown-buttons-trigger">
    <button id="dropdown-buttons-trigger" class="btn btn-secondary topbarbtn" aria-label="Download this page"><i
            class="fas fa-download"></i></button>

    <div class="dropdown-buttons">
        <!-- ipynb file if we had a myst markdown file -->
        
        <!-- Download raw file -->
        <a class="dropdown-buttons" href="../_sources/unix/shellintro.ipynb"><button type="button"
                class="btn btn-secondary topbarbtn" title="Download source file" data-toggle="tooltip"
                data-placement="left">.ipynb</button></a>
        <!-- Download PDF via print -->
        <button type="button" id="download-print" class="btn btn-secondary topbarbtn" title="Print to PDF"
            onClick="window.print()" data-toggle="tooltip" data-placement="left">.pdf</button>
    </div>
</div>

            <!-- Source interaction buttons -->

<div class="dropdown-buttons-trigger">
    <button id="dropdown-buttons-trigger" class="btn btn-secondary topbarbtn"
        aria-label="Connect with source repository"><i class="fab fa-github"></i></button>
    <div class="dropdown-buttons sourcebuttons">
        <a class="repository-button"
            href="https://github.com/jappavoo/UndertheCovers"><button type="button" class="btn btn-secondary topbarbtn"
                data-toggle="tooltip" data-placement="left" title="Source repository"><i
                    class="fab fa-github"></i>repository</button></a>
        
        
    </div>
</div>

            <!-- Full screen (wrap in <a> to have style consistency -->

<a class="full-screen-button"><button type="button" class="btn btn-secondary topbarbtn" data-toggle="tooltip"
        data-placement="bottom" onclick="toggleFullScreen()" aria-label="Fullscreen mode"
        title="Fullscreen mode"><i
            class="fas fa-expand"></i></button></a>

            <!-- Launch buttons -->

<div class="dropdown-buttons-trigger">
    <button id="dropdown-buttons-trigger" class="btn btn-secondary topbarbtn"
        aria-label="Launch interactive content"><i class="fas fa-rocket"></i></button>
    <div class="dropdown-buttons">
        
        
        <a class="jupyterhub-button" href="https://jupyterhub-opf-jupyterhub.apps.zero.massopen.cloud/hub/user-redirect/git-pull?repo=https://github.com/jappavoo/UndertheCovers&urlpath=tree/UndertheCovers/underthecovers/unix/shellintro.ipynb&branch=main"><button type="button"
                class="btn btn-secondary topbarbtn" title="Launch JupyterHub" data-toggle="tooltip"
                data-placement="left"><img class="jupyterhub-button-logo"
                    src="../_static/images/logo_jupyterhub.svg"
                    alt="Interact on JupyterHub">JupyterHub</button></a>
        
        
        
    </div>
</div>

        </div>

        <!-- Table of contents -->
        <div class="d-none d-md-block col-md-2 bd-toc show">
            
            <div class="tocsection onthispage pt-5 pb-3">
                <i class="fas fa-list"></i> Contents
            </div>
            <nav id="bd-toc-nav">
                <ul class="visible nav section-nav flex-column">
 <li class="toc-h2 nav-item toc-entry">
  <a class="reference internal nav-link" href="#our-interface-to-the-kernel">
   Our interface to the Kernel
  </a>
 </li>
 <li class="toc-h2 nav-item toc-entry">
  <a class="reference internal nav-link" href="#bash">
   Bash
  </a>
 </li>
 <li class="toc-h2 nav-item toc-entry">
  <a class="reference internal nav-link" href="#shell-session">
   Shell Session
  </a>
  <ul class="nav section-nav flex-column">
   <li class="toc-h3 nav-item toc-entry">
    <a class="reference internal nav-link" href="#terminal-windows-and-the-shell">
     Terminal Windows and the Shell
    </a>
   </li>
  </ul>
 </li>
 <li class="toc-h2 nav-item toc-entry">
  <a class="reference internal nav-link" href="#line-oriented-conversation">
   Line oriented conversation
  </a>
  <ul class="nav section-nav flex-column">
   <li class="toc-h3 nav-item toc-entry">
    <a class="reference internal nav-link" href="#lines">
     Lines
    </a>
   </li>
   <li class="toc-h3 nav-item toc-entry">
    <a class="reference internal nav-link" href="#the-prompt">
     The Prompt
    </a>
   </li>
  </ul>
 </li>
 <li class="toc-h2 nav-item toc-entry">
  <a class="reference internal nav-link" href="#our-first-shell-session">
   Our first shell session
  </a>
 </li>
</ul>

            </nav>
        </div>
    </div>
</div>
    <div id="main-content" class="row">
        <div class="col-12 col-md-9 pl-md-3 pr-md-0">
        
              <div>
                
  <div class="section" id="the-shell-part-i-having-an-ascii-conversation-with-the-os">
<h1>The Shell - Part I: Having an ASCII conversation with the OS<a class="headerlink" href="#the-shell-part-i-having-an-ascii-conversation-with-the-os" title="Permalink to this headline">¶</a></h1>
<p>As we read in the Unix <a class="reference internal" href="intro.html"><span class="doc std std-doc">introduction</span></a> a key feature of Unix is its command line oriented interface that was developed for <a class="reference internal" href="terminal.html"><span class="doc std std-doc">ASCII terminals</span></a> devices. Our goal in this chapter is to understand the general model of the shell and how to start working in the terminal environment.  If you have not done so be sure to have read the sections of the Unix <a class="reference external" href="../unix/intro.ipynb#UnixKernel_sec">Kernel</a>, <a class="reference external" href="../unix/intro.html#UnixUser_sec">User Programs</a>, how we <a class="reference external" href="../unix/intro.html#UnixViz_sec">visualize a running Unix system</a>, the introduction to <a class="reference external" href="../unix/terminal.html#TerminalEmulators_sec">Terminal Emulators</a> and the chapter introducing <a class="reference internal" href="files.html"><span class="doc std std-doc">Files and Directories</span></a>.</p>
<blockquote>
<div><p><img style="margin: 10px 0px 0px 0px;" align="left" width="40" src="../images/fyi.svg"> <p style="background-color:powderblue;"> It is a good idea to read this chapter with a terminal connection open so that you can explore the material as you read it.  Instructions and guidance on how to do this can be found in <a class="reference external" href="../unix/terminal.html#TerminalEmulators_sec">Terminal Emulators</a>.</p>
</div></blockquote>
<div class="section" id="our-interface-to-the-kernel">
<h2>Our interface to the Kernel<a class="headerlink" href="#our-interface-to-the-kernel" title="Permalink to this headline">¶</a></h2>
<img style="float: right; margin: 0px 0px 0px 10px;" width="40%" src="../images/UnixL01_SHCHT/04SHLLChat.png">
<p>As discussed the core functionality of the Unix operating system is implemented by the Kernel.  But the kernel is really only responsible for making it easier to run and write application/user programs. The Kernel does not have any support for humans to directly interact with it.  That is where the shell comes in. The shell acts as our primary point of contact/interface not only to the kernel but also all the other programs installed.</p>
</div>
<div class="section" id="bash">
<h2>Bash<a class="headerlink" href="#bash" title="Permalink to this headline">¶</a></h2>
<p>Over the years there have been many variants of the shell program that have been developed not only for Unix but other operating systems as well (see <a class="reference external" href="https://en.wikipedia.org/wiki/Comparison_of_command_shells">comparison of shells</a>.   While there are differences between the various Unix shell programs the basic model of interaction we cover in this chapter is largely the same across all of them.   However, with respect to the exact syntax and details we will be focus on the <a class="reference external" href="https://en.wikipedia.org/wiki/Bash_(Unix_shell)">Bourne Again Shell (BASH)</a>,  as it is the default shell for Linux which is the version of Unix we use through out this book.</p>
<p>It is a Unix tradition that programs installed on the system, like Bash, include documentation on how it is used.  To access the manual pages you use the <code class="docutils literal notranslate"><span class="pre">man</span></code> program eg. <code class="docutils literal notranslate"><span class="pre">man</span> <span class="pre">man</span></code> would bring up the documentation about the manual itself.  So <code class="docutils literal notranslate"><span class="pre">man</span> <span class="pre">bash</span></code> will bring up the manual page for the bash shell.  You can find detailed coverage of the syntax and how bash works in the manual.  After we cover some basics it will be much easier to read and understand the Bash manual page as it assumes that you understand some basic Unix and generic shell concepts.</p>
</div>
<div class="section" id="shell-session">
<h2>Shell Session<a class="headerlink" href="#shell-session" title="Permalink to this headline">¶</a></h2>
<p>Remembering that ASCII terminals were the original devices created for humans to interactively work with computers the shell is designed to managed and communicate with a human at a terminal. Thus the human and the shell are really exchanging bytes that encoded information in ASCII.  For every new terminal connection software directs the kernel to start an instance of a shell program  to interact with a user at the terminal.  We consider this the be the start of a shell “session”.  The session ends when either the communication between the shell and the terminal is disconnected or because the user purposefully exits the shell.</p>
<div class="section" id="terminal-windows-and-the-shell">
<h3>Terminal Windows and the Shell<a class="headerlink" href="#terminal-windows-and-the-shell" title="Permalink to this headline">¶</a></h3>
<p>Today of course, we rarely use physical terminals any more.  Rather, on our physical client computers (eg. laptops, desktops, tablets, etc) we can start many terminal emulator windows to establish a shell session for each (see below). Each session will stay active until we exit or close the session and kill the associated shell.  Since each window is connected to its own shell they represent independent “conversations” in which we can do different things concurrently.</p>
<img style="float: left; margin: 0px 0px 0px 0px;" width="40%" src="../images/UnixL01_SHCHT/041SHLLChat.png">
<img style="align: right; margin: 0px 0px 0px 0px;" width="44%" src="../images/terminalwins.png"><blockquote>
<div><p><img style="margin: 10px 0px 0px 0px;" align="left" width="40" src="../images/do.svg"> <p style="background-color:lightgreen;">  While you are learning how to work with bash it can be really useful to keep a terminal open in which you keep the bash manual page open while you use another terminal shell session to do your exploring.</p>
</div></blockquote>
</div>
</div>
<div class="section" id="line-oriented-conversation">
<h2>Line oriented conversation<a class="headerlink" href="#line-oriented-conversation" title="Permalink to this headline">¶</a></h2>
<p>The way we interact with the shell can be thought of as a structured, interactive, “conversation”. The conversation is a series of back and forth exchanges. We, the user, type in a request in the form of a “command line” and in response the shell takes some action and generate a particular response, as byte values, which are sent back to the terminal.  The terminal translates the response as ASCII characters displaying/printing the appropriate images to the screen so we can read it.</p>
<div class="section" id="lines">
<h3>Lines<a class="headerlink" href="#lines" title="Permalink to this headline">¶</a></h3>
<p>Given our use of ASCII what constitutes a line, in Unix, is very precise. It is a series of byte values terminated by a single ‘new-line/line-feed’ value.  Using an ASCII  table we see that the byte value for the new-line character is <code class="docutils literal notranslate"><span class="pre">0b10000010</span></code> in binary or expressed more concisely in hex as <code class="docutils literal notranslate"><span class="pre">0xA</span></code>. The common short hand notation for the newline byte value is <code class="docutils literal notranslate"><span class="pre">\n</span></code>.  Pressing the <em>return</em>  or <em>enter</em> key, depending on your keyboard, within a terminal window will generate this value.   We will simply refer to the key that generates a ‘\n’ as the <em>enter</em> key.</p>
<p>When <code class="docutils literal notranslate"><span class="pre">\n</span></code> is received by the shell it will begin working on processing the line as a command.  In this way it is line oriented.  If the user presses <code class="docutils literal notranslate"><span class="pre">\n</span></code> with no other preceding characters this is considered a blank or empty line.</p>
<p>In the other direction, the terminal emulator is configured to take the appropriate action when it receives a <code class="docutils literal notranslate"><span class="pre">\n</span></code>.  That is to say it moves the cursor to the next lower position in the window (scrolling if configured to do so) and moves it to the left edge of the new line (again scrolling the window if configured to).</p>
<blockquote>
<div><p><img style="margin: 10px 0px 0px 0px;" align="left" width="60" src="../images/fyi.svg"> <p style="background-color:powderblue;"> There are two basic modes that UNIX can use when sending bytes sent from the terminal connection to the program running on the connection (so far in our case this is the shell later we will see that programs that we run from the shell can be allowed to take over this role).  The two modes are character and line.  In character mode the terminal data is sent along to the program running as soon as they are received, including the <code class="docutils literal notranslate"><span class="pre">\n</span></code>.  In line (or buffered mode) the kernel stores up the characters and sent until it receives a <code class="docutils literal notranslate"><span class="pre">\n</span></code>.   At which point it sends the complete line with the <code class="docutils literal notranslate"><span class="pre">\n</span></code> to the program running. The default mode is typically line mode.  For the most part it does not really matter to us as the shell’s behavior is largely the same as it is a line oriented program that is designed to process whole lines at a time.  However, later on this can be a source of confusion when we are writing programs that are not line oriented, rather they assume that they will see characters as soon as keys are pressed by the user.</p>
</div></blockquote>
</div>
<div class="section" id="the-prompt">
<h3>The Prompt<a class="headerlink" href="#the-prompt" title="Permalink to this headline">¶</a></h3>
<p>To visually let us know that the shell is ready for us to send it a line it sends a configurable sequence of characters which we call the prompt string or simply the prompt.  When a new connection is established it sends the prompt to the terminal so that we know that it is ready for the session/conversation to begin.  The classic prompt string is often one either the dollar symbol, <code class="docutils literal notranslate"><span class="pre">$</span></code> or greater than sign <code class="docutils literal notranslate"><span class="pre">&gt;</span></code> followed by a single space character.  In our illustrations and the default configuration we use set up the prompt to be the classic dollar sign followed by a space.</p>
<blockquote>
<div><p><img style="margin: 10px 0px 0px 0px;" align="left" width="60" src="../images/fyi.svg"> <p style="background-color:powderblue;"> Today most system default to much more complicated prompt strings.  Where the prompt might state your user name, the date or time, what your current working directory is, etc.   Later when we learn about shell variables we will find out that there is a special variable <code class="docutils literal notranslate"><span class="pre">PS1</span></code> who’s value is used to generate the prompt string every time the shell want to send it.  Given that every terminal session/window is connected to separate shells can be very useful to set each one with a unique prompt to help keep you organized eg. <code class="docutils literal notranslate"><span class="pre">export</span> <span class="pre">PS1='Term</span> <span class="pre">1&gt;</span> <span class="pre">'</span></code>.
If you are interested in the details use the following <code class="docutils literal notranslate"><span class="pre">man</span> <span class="pre">bash</span></code> to pull up the manual page for bash and look for the section called “Prompting”.</p>
</div></blockquote>
</div>
</div>
<div class="section" id="our-first-shell-session">
<h2>Our first shell session<a class="headerlink" href="#our-first-shell-session" title="Permalink to this headline">¶</a></h2>
<p>Before we more formally explain the operation of the shell lets poke it and see how it behaves.
Perhaps the simplest thing we can do is send it an empty line by pressing <em>enter</em> on its own.
What we should find is that the terminal will move to the next line and display the prompt again.
But we want to be a little more careful to think about what happened behind the scenes so that we can build a more complete model in our mind about how the shell and terminal interactions work.</p>
<p>What happened was that after we pressed and release the <em>enter</em> key the terminal sent through the Unix kernel a byte to the instance of the shell program that our terminal is virtually connected too.  Precisely it would have sent the binary pattern of <code class="docutils literal notranslate"><span class="pre">0b10000010</span></code> or in hex <code class="docutils literal notranslate"><span class="pre">0xa</span></code> as the left most image of the below diagram illustrates.  Our  diagrams below show both the <code class="docutils literal notranslate"><span class="pre">\n</span></code> human readable ASCII symbol and the underlying byte value.  In other diagrams we might stop showing the byte values and only show the ASCII human readable symbols but it is important to remember that under the covers the terminal and shell are really just exchanging raw binary values that use the ASCII standard to encode the data.</p>
<p>Middle figure cartoons the logic that the shell did in response the receiving the blank line.  It is programmed to do nothing and then simply send back to the terminal the prompt so that the user knows it is ready for another command line to be sent.  If you are interested in why the terminal displayed a <code class="docutils literal notranslate"><span class="pre">\n</span></code> causing the prompt sent by the shell to be on the next line of the terminal read the fyi ECHO box below.</p>
<img style="float: left; margin: 0px 0px 0px 0px;" width="30%" src="../images/UnixL01_SHCHT/06SHLLChat.png">
<img style="float: left; margin: 0px 0px 0px 0px;" width="30%" src="../images/UnixL01_SHCHT/07SHLLChat.png">
<img style="float: left; margin: 0px 0px 0px 0px;" width="30%" src="../images/UnixL01_SHCHT/08SHLLChat.png"><blockquote>
<div><p><img   style="margin: 10px 0px 0px 0px;" align="left" width="60" src="../images/fyi.svg"> <p style
                                                                                              ="background-color:powderblue;"> <strong>ECHO:</strong>.  You might be wondering why is it that you see the characters you type at the keyboard of terminal appear on the screen of the terminal.  If pressing a key really sends the data to the Unix kernel and then to the program running such as the shell there is not reason we would see it.  Does the Shell send a copy back of what it received?  No it does not.  Rather typically the UNIX kernel is configured, by default, to send back a copy of what it receives on a specific terminal connection back to the terminal itself.  This is setting is called terminal ECHO mode.  So by default even before the Kernel sends data up to the destination program  it sends a copy back to the terminal so that the user can see what they typed.  This includes the <code class="docutils literal notranslate"><span class="pre">\n</span></code> that the user pressed to indicate the end of the command line.  Hence in this default mode any data send back from the shells behavior will appear on a new-line.  Programs can ask the kernel to disable this setting to have more control of what the users sees.  As a matter of fact like many things in Unix there is a command you can issue to have the kernel adjust the setting for you terminal connect including turning off the echo behavior (<code class="docutils literal notranslate"><span class="pre">stty</span> <span class="pre">-echo</span></code> to turn off and <code class="docutils literal notranslate"><span class="pre">stty</span> <span class="pre">echo</span></code> to turn back on).  Doing so lets you observe what is really being sent back in response to your command and not what the kernel automatically generated as echo data.  Note things might get confusing quickly if you turn echo off.   But Unix is all about understanding how things work and have the power to control them.  If you want to know more try <code class="docutils literal notranslate"><span class="pre">man</span> <span class="pre">stty</span></code> but be warned you will find that communications on a terminal is actually quite a bit more complex than it might seem – there is a lot of history and skeletons buried here and the kernel is <em>cooking</em> the communications quite a bit ;-)</p>
</div></blockquote>
<blockquote>
<div><p>What to have some fun.  Believe it or not we used to develop and play games on ASCII Terminals.  If you want to get an idea what cost some people their degrees try <code class="docutils literal notranslate"><span class="pre">umoria</span></code></p>
</div></blockquote>
</div>
</div>

    <script type="text/x-thebe-config">
    {
        requestKernel: true,
        binderOptions: {
            repo: "binder-examples/jupyter-stacks-datascience",
            ref: "master",
        },
        codeMirrorConfig: {
            theme: "abcdef",
            mode: "python"
        },
        kernelOptions: {
            kernelName: "python3",
            path: "./unix"
        },
        predefinedOutput: true
    }
    </script>
    <script>kernelName = 'python3'</script>

              </div>
              
        
        <div class='prev-next-bottom'>
            

        </div>
        
        </div>
    </div>
    <footer class="footer mt-5 mt-md-0">
    <div class="container">
      <p>
        
          By Jonathan Appavoo<br/>
        
            &copy; Copyright 2021.<br/>
      </p>
    </div>
  </footer>
</main>


      </div>
    </div>
  
  <script src="../_static/js/index.1c5a1a01449ed65a7b51.js"></script>

  
  </body>
</html>