0x00 00000000 BRK interrupt - impl: Implied i
0x01 00000001 ORA or with accumulator - X,ind: Zero Page Indexed Indirect (zp,x)
0x05 00000101 ORA or with accumulator - zpg: Zero Page zp
0x06 00000110 ASL arithmetic shift left - zpg: Zero Page zp
0x08 00001000 PHP push processor status (SR) - impl: Implied i
0x09 00001001 ORA or with accumulator - #: Immediate #
0x0a 00001010 ASL arithmetic shift left - A: Accumulator A
0x0d 00001101 ORA or with accumulator - abs: Absolute a
0x0e 00001110 ASL arithmetic shift left - abs: Absolute a
0x10 00010000 BPL branch on plus (negative clear) - rel: Program Counter Relative r
0x11 00010001 ORA or with accumulator - ind,Y: Zero Page Indirect Indexed with Y (zp),y
0x15 00010101 ORA or with accumulator - zpg,X: Zero Page Index with X
0x16 00010110 ASL arithmetic shift left - zpg,X: Zero Page Index with X
0x18 00011000 CLC clear carry - impl: Implied i
0x19 00011001 ORA or with accumulator - abs,Y: Absolute Indexed with Y a,y
0x1d 00011101 ORA or with accumulator - abs,X: Absolute Indexed with X a,x
0x1e 00011110 ASL arithmetic shift left - abs,X: Absolute Indexed with X a,x
0x20 00100000 JSR jump subroutine - abs: Absolute a
0x21 00100001 AND and (with accumulator) - X,ind: Zero Page Indexed Indirect (zp,x)
0x24 00100100 BIT bit test - zpg: Zero Page zp
0x25 00100101 AND and (with accumulator) - zpg: Zero Page zp
0x26 00100110 ROL rotate left - zpg: Zero Page zp
0x28 00101000 PLP pull processor status (SR) - impl: Implied i
0x29 00101001 AND and (with accumulator) - #: Immediate #
0x2a 00101010 ROL rotate left - A: Accumulator A
0x2c 00101100 BIT bit test - abs: Absolute a
0x2d 00101101 AND and (with accumulator) - abs: Absolute a
0x2e 00101110 ROL rotate left - abs: Absolute a
0x30 00110000 BMI branch on minus (negative set) - rel: Program Counter Relative r
0x31 00110001 AND and (with accumulator) - ind,Y: Zero Page Indirect Indexed with Y (zp),y
0x35 00110101 AND and (with accumulator) - zpg,X: Zero Page Index with X
0x36 00110110 ROL rotate left - zpg,X: Zero Page Index with X
0x38 00111000 SEC set carry - impl: Implied i
0x39 00111001 AND and (with accumulator) - abs,Y: Absolute Indexed with Y a,y
0x3d 00111101 AND and (with accumulator) - abs,X: Absolute Indexed with X a,x
0x3e 00111110 ROL rotate left - abs,X: Absolute Indexed with X a,x
0x40 01000000 RTI return from interrupt - impl: Implied i
0x41 01000001 EOR exclusive or (with accumulator) - X,ind: Zero Page Indexed Indirect (zp,x)
0x45 01000101 EOR exclusive or (with accumulator) - zpg: Zero Page zp
0x46 01000110 LSR logical shift right - zpg: Zero Page zp
0x48 01001000 PHA push accumulator - impl: Implied i
0x49 01001001 EOR exclusive or (with accumulator) - #: Immediate #
0x4a 01001010 LSR logical shift right - A: Accumulator A
0x4c 01001100 JMP jump - abs: Absolute a
0x4d 01001101 EOR exclusive or (with accumulator) - abs: Absolute a
0x4e 01001110 LSR logical shift right - abs: Absolute a
0x50 01010000 BVC branch on overflow clear - rel: Program Counter Relative r
0x51 01010001 EOR exclusive or (with accumulator) - ind,Y: Zero Page Indirect Indexed with Y (zp),y
0x55 01010101 EOR exclusive or (with accumulator) - zpg,X: Zero Page Index with X
0x56 01010110 LSR logical shift right - zpg,X: Zero Page Index with X
0x58 01011000 CLI clear interrupt disable - impl: Implied i
0x59 01011001 EOR exclusive or (with accumulator) - abs,Y: Absolute Indexed with Y a,y
0x5d 01011101 EOR exclusive or (with accumulator) - abs,X: Absolute Indexed with X a,x
0x5e 01011110 LSR logical shift right - abs,X: Absolute Indexed with X a,x
0x60 01100000 RTS return from subroutine - impl: Implied i
0x61 01100001 ADC add with carry - X,ind: Zero Page Indexed Indirect (zp,x)
0x65 01100101 ADC add with carry - zpg: Zero Page zp
0x66 01100110 ROR rotate right - zpg: Zero Page zp
0x68 01101000 PLA pull accumulator - impl: Implied i
0x69 01101001 ADC add with carry - #: Immediate #
0x6a 01101010 ROR rotate right - A: Accumulator A
0x6c 01101100 JMP jump - ind: Absolute Indirect (a)
0x6d 01101101 ADC add with carry - abs: Absolute a
0x6e 01101110 ROR rotate right - abs: Absolute a
0x70 01110000 BVS branch on overflow set - rel: Program Counter Relative r
0x71 01110001 ADC add with carry - ind,Y: Zero Page Indirect Indexed with Y (zp),y
0x75 01110101 ADC add with carry - zpg,X: Zero Page Index with X
0x76 01110110 ROR rotate right - zpg,X: Zero Page Index with X
0x78 01111000 SEI set interrupt disable - impl: Implied i
0x79 01111001 ADC add with carry - abs,Y: Absolute Indexed with Y a,y
0x7d 01111101 ADC add with carry - abs,X: Absolute Indexed with X a,x
0x7e 01111110 ROR rotate right - abs,X: Absolute Indexed with X a,x
0x81 10000001 STA store accumulator - X,ind: Zero Page Indexed Indirect (zp,x)
0x84 10000100 STY store Y - zpg: Zero Page zp
0x85 10000101 STA store accumulator - zpg: Zero Page zp
0x86 10000110 STX store X - zpg: Zero Page zp
0x88 10001000 DEY decrement Y - impl: Implied i
0x8a 10001010 TXA transfer X to accumulator - impl: Implied i
0x8c 10001100 STY store Y - abs: Absolute a
0x8d 10001101 STA store accumulator - abs: Absolute a
0x8e 10001110 STX store X - abs: Absolute a
0x90 10010000 BCC branch on carry clear - rel: Program Counter Relative r
0x91 10010001 STA store accumulator - ind,Y: Zero Page Indirect Indexed with Y (zp),y
0x94 10010100 STY store Y - zpg,X: Zero Page Index with X
0x95 10010101 STA store accumulator - zpg,X: Zero Page Index with X
0x96 10010110 STX store X - zpg,Y: Zero Page Index with Y
0x98 10011000 TYA transfer Y to accumulator - impl: Implied i
0x99 10011001 STA store accumulator - abs,Y: Absolute Indexed with Y a,y
0x9a 10011010 TXS transfer X to stack pointer - impl: Implied i
0x9d 10011101 STA store accumulator - abs,X: Absolute Indexed with X a,x
0xa0 10100000 LDY load Y - #: Immediate #
0xa1 10100001 LDA load accumulator - X,ind: Zero Page Indexed Indirect (zp,x)
0xa2 10100010 LDX load X - #: Immediate #
0xa4 10100100 LDY load Y - zpg: Zero Page zp
0xa5 10100101 LDA load accumulator - zpg: Zero Page zp
0xa6 10100110 LDX load X - zpg: Zero Page zp
0xa8 10101000 TAY transfer accumulator to Y - impl: Implied i
0xa9 10101001 LDA load accumulator - #: Immediate #
0xaa 10101010 TAX transfer accumulator to X - impl: Implied i
0xac 10101100 LDY load Y - abs: Absolute a
0xad 10101101 LDA load accumulator - abs: Absolute a
0xae 10101110 LDX load X - abs: Absolute a
0xb0 10110000 BCS branch on carry set - rel: Program Counter Relative r
0xb1 10110001 LDA load accumulator - ind,Y: Zero Page Indirect Indexed with Y (zp),y
0xb4 10110100 LDY load Y - zpg,X: Zero Page Index with X
0xb5 10110101 LDA load accumulator - zpg,X: Zero Page Index with X
0xb6 10110110 LDX load X - zpg,Y: Zero Page Index with Y
0xb8 10111000 CLV clear overflow - impl: Implied i
0xb9 10111001 LDA load accumulator - abs,Y: Absolute Indexed with Y a,y
0xba 10111010 TSX transfer stack pointer to X - impl: Implied i
0xbc 10111100 LDY load Y - abs,X: Absolute Indexed with X a,x
0xbd 10111101 LDA load accumulator - abs,X: Absolute Indexed with X a,x
0xbe 10111110 LDX load X - abs,Y: Absolute Indexed with Y a,y
0xc0 11000000 CPY compare with Y - #: Immediate #
0xc1 11000001 CMP compare (with accumulator) - X,ind: Zero Page Indexed Indirect (zp,x)
0xc4 11000100 CPY compare with Y - zpg: Zero Page zp
0xc5 11000101 CMP compare (with accumulator) - zpg: Zero Page zp
0xc6 11000110 DEC decrement - zpg: Zero Page zp
0xc8 11001000 INY increment Y - impl: Implied i
0xc9 11001001 CMP compare (with accumulator) - #: Immediate #
0xca 11001010 DEX decrement X - impl: Implied i
0xcc 11001100 CPY compare with Y - abs: Absolute a
0xcd 11001101 CMP compare (with accumulator) - abs: Absolute a
0xce 11001110 DEC decrement - abs: Absolute a
0xd0 11010000 BNE branch on not equal (zero clear) - rel: Program Counter Relative r
0xd1 11010001 CMP compare (with accumulator) - ind,Y: Zero Page Indirect Indexed with Y (zp),y
0xd5 11010101 CMP compare (with accumulator) - zpg,X: Zero Page Index with X
0xd6 11010110 DEC decrement - zpg,X: Zero Page Index with X
0xd8 11011000 CLD clear decimal - impl: Implied i
0xd9 11011001 CMP compare (with accumulator) - abs,Y: Absolute Indexed with Y a,y
0xdd 11011101 CMP compare (with accumulator) - abs,X: Absolute Indexed with X a,x
0xde 11011110 DEC decrement - abs,X: Absolute Indexed with X a,x
0xe0 11100000 CPX compare with X - #: Immediate #
0xe1 11100001 SBC subtract with carry - X,ind: Zero Page Indexed Indirect (zp,x)
0xe4 11100100 CPX compare with X - zpg: Zero Page zp
0xe5 11100101 SBC subtract with carry - zpg: Zero Page zp
0xe6 11100110 INC increment - zpg: Zero Page zp
0xe8 11101000 INX increment X - impl: Implied i
0xe9 11101001 SBC subtract with carry - #: Immediate #
0xea 11101010 NOP no operation - impl: Implied i
0xec 11101100 CPX compare with X - abs: Absolute a
0xed 11101101 SBC subtract with carry - abs: Absolute a
0xee 11101110 INC increment - abs: Absolute a
0xf0 11110000 BEQ branch on equal (zero set) - rel: Program Counter Relative r
0xf1 11110001 SBC subtract with carry - ind,Y: Zero Page Indirect Indexed with Y (zp),y
0xf5 11110101 SBC subtract with carry - zpg,X: Zero Page Index with X
0xf6 11110110 INC increment - zpg,X: Zero Page Index with X
0xf8 11111000 SED set decimal - impl: Implied i
0xf9 11111001 SBC subtract with carry - abs,Y: Absolute Indexed with Y a,y
0xfd 11111101 SBC subtract with carry - abs,X: Absolute Indexed with X a,x
0xfe 11111110 INC increment - abs,X: Absolute Indexed with X a,x
